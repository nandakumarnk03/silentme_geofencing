package com.example.app2;

import android.app.NotificationManager;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.media.AudioManager;
import android.os.Build;
import android.util.Log;
import android.widget.Toast;
import com.example.app2.MainActivity;

import com.google.android.gms.location.Geofence;
import com.google.android.gms.location.GeofencingEvent;

import java.util.List;

import static android.media.AudioManager.ADJUST_MUTE;
import static android.media.AudioManager.ADJUST_SAME;

public class GeofenceBroadcastReciever extends BroadcastReceiver {

    private static final String TAG = "GeofenceBroadcastReceiv";
   // private AudioManager audio;
    private AudioManager audioManager;
    static int flag;

  /*  public GeofenceBroadcastReciever(AudioManager audioManager) {
        this.audioManager = audioManager;
    } */

    @Override
    public void onReceive(Context context, Intent intent) {
        // TODO: This method is called when the BroadcastReceiver is receiving
        // an Intent broadcast.
//        Toast.makeText(context, "Geofence triggered...", Toast.LENGTH_SHORT).show();

        NotificationHelper notificationHelper = new NotificationHelper(context);

        GeofencingEvent geofencingEvent = GeofencingEvent.fromIntent(intent);
        AudioManager audioManager = (AudioManager) context.getSystemService(Context.AUDIO_SERVICE);

        if (geofencingEvent.hasError()) {
            Log.d(TAG, "onReceive: Error receiving geofence event...");
            return;
        }

        List<Geofence> geofenceList = geofencingEvent.getTriggeringGeofences();
        for (Geofence geofence : geofenceList) {
            Log.d(TAG, "onReceive: " + geofence.getRequestId());
        }
//      Location location = geofencingEvent.getTriggeringLocation();
        int transitionType = geofencingEvent.getGeofenceTransition();
        //   int previous_state = audioManager.ADJUST_SAME;
        MainActivity ma = new MainActivity();


       /* switch (transitionType) {
            case Geofence.GEOFENCE_TRANSITION_ENTER:
                //audioManager.setRingerMode(AudioManager.RINGER_MODE_SILENT);
                Toast.makeText(context, "GEOFENCE_TRANSITION_ENTER", Toast.LENGTH_SHORT).show(); //a = 1
                notificationHelper.sendHighPriorityNotification("GEOFENCE_TRANSITION_ENTER", "", MapsActivity.class);
               // audioManager.setRingerMode(audioManager.ADJUST_MUTE);
               // flag=1;
               // ma.change_mode(flag);
                break;
            case Geofence.GEOFENCE_TRANSITION_DWELL:
                audioManager.setRingerMode(AudioManager.RINGER_MODE_SILENT);
                Toast.makeText(context, "GEOFENCE_TRANSITION_DWELL", Toast.LENGTH_SHORT).show();
                notificationHelper.sendHighPriorityNotification("GEOFENCE_TRANSITION_DWELL", "", MapsActivity.class);
                flag=1;
                ma.change_mode(flag);
                break;
            case Geofence.GEOFENCE_TRANSITION_EXIT:
                Toast.makeText(context, "GEOFENCE_TRANSITION_EXIT", Toast.LENGTH_SHORT).show();
                notificationHelper.sendHighPriorityNotification("GEOFENCE_TRANSITION_EXIT", "", MapsActivity.class);
                //audioManager.setRingerMode(previous_state);
                break;
        }*/

       if (transitionType == Geofence.GEOFENCE_TRANSITION_ENTER){
            Toast.makeText(context, "GEOFENCE_TRANSITION_ENTER", Toast.LENGTH_SHORT).show();
            notificationHelper.sendHighPriorityNotification("GEOFENCE_TRANSITION_ENTER", "", MapsActivity.class);
            setRingerMode(context,AudioManager.RINGER_MODE_SILENT);
        }


    }
    private void setRingerMode(Context context, int mode)
    {
        NotificationManager nm = (NotificationManager) context.getSystemService(Context.NOTIFICATION_SERVICE);

        //Check for DND permission for API 24+
        if (Build.VERSION.SDK_INT < 24 || (Build.VERSION.SDK_INT >= 24 && ! nm.isNotificationPolicyAccessGranted()))
        {

            audioManager.setRingerMode(mode);
        }
    }
    }

